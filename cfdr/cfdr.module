<?php
/**
 * @file Main module file
 */

/**
 * Implementation of hook_node_info().
 */
function cfdr_node_info() {
  return array(
    'cfdr' => array(
      'name' => 'Received CFD',
      'module' => 'cfdr',
      'description' => t("Provides content type support for Mexican CFDs which have been received"),
      'has_title' => TRUE,
      'title_label' => t('FE #'),
      'has_body' => FALSE,
      'locked' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function cfdr_menu() {
  $menu = array();
  $menu['node/%node/download/pdf'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Download',
    'access callback' => 'cfdr_access',
    'access arguments' => array('view', 1),
    'page callback' => 'cfd_download_pdf',
    'page arguments' => array(1),
    'file' => './cfd.pdf.inc'
  );
  $menu['node/%node/download/xml'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Download',
    'access callback' => 'cfdr_access',
    'access arguments' => array('view', 1),
    'page callback' => 'cfdr_download_xml',
    'page arguments' => array(1),
  );
  $menu['node/%node/html'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'HTML View',
    'access callback' => 'cfdr_access',
    'access arguments' => array('view', 1),
    'page callback' => 'cfdr_view_html',
    'page arguments' => array(1),
  );
  // MUST RENAME
  $menu['cfdrs'] = array(
    'title' => 'View Facturas Electronicas',
    'access callback' => 'user_access',
    'access arguments' => array('view assigned FEs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cfdr_view_cfds'),
  );
  //Admin menu
  $menu['admin/settings/cfdr'] = array(
    'title' => 'CFD - Received',
    'description' => 'Configure CFD - Received options',
    'access callback' => 'user_access',
    'access arguments' => array('administer cfdr'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cfdr_admin_form'),
    'file' => './cfdr.admin.inc',
  );
  return $menu;
}

/**
 * Implementation of hook_perm().
 */
function cfdr_perm() {
  return array('administer cfdr');
}


/**
 * Implementation of hook_access().
 * Enforces permissions described by hook_perm() for node type cfdr
 * @return boolean true if access granted.
 */
function cfdr_access($op, $node, $account = NULL) {
  global $user;
  if (!isset($account))
    $account = $user;
  
  switch ($op) {
    case 'view':
      return TRUE;

    case 'create':
      return TRUE;

    case 'delete':
      return TRUE;

    case 'update':
      return FALSE;
  }
}

/**
 * Implementation of hook_form().
 */
function cfdr_form(&$node, $form_state) {
  //get info defined in cfdr_node_info()
  $type = node_get_types('type', $node);
  
  $form = array();
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => $type->title_label,
    '#required' => FALSE,
    '#default_value' => $node->title,
    '#weight' => -5,
    '#maxlenght' => 255,
    '#disabled' => TRUE,
  );
  $form['fecha_cfd'] = array(
    '#type' => 'textfield',
    '#title' => 'Fecha y hora',
    '#required' => FALSE,
    '#default_value' => $node->fecha_cfd,
    '#weight' => 0,
    '#maxlenght' => 13,
    '#disabled' => TRUE,
  );
  $form['cliente_rfc'] = array(
    '#type' => 'textfield',
    '#title' => 'RFC receptor',
    '#required' => FALSE,
    '#default_value' => $node->cliente_rfc,
    '#weight' => 1,
    '#maxlenght' => 13,
    '#disabled' => TRUE,
  );
  //for uploading XML file
  //possible check for $node->nid NULLity
  if ($node->nid) {
    $form['xml_file']['#prefix'] = '<strong>' . t('Download') . ':</strong><br />';
    $form['xml_file']['#value'] = cfdr_get_dl_links($node->title, $node->nid);
    $form['xml_file']['#weight'] = 5;
  }
  else {
    $form['#attributes']['enctype'] = 'multipart/form-data';
    $form['xml_file'] = array(
      '#type' => 'file',
      '#title' => t('Select @type file', array('@type' => 'XML')),
      '#required' => FALSE,
      '#weight' => 5,
      '#description' => t('The CFD in XML format'),
    );
  }
  $form['#submit'][] = 'cfdr_xml_file_submit';
  return $form;
}

function cfdr_form_cfdr_node_form_alter(&$form, &$form_state) {
  // disable revisions and previews, to make my life easy
  $form['revision_information']['#access'] = FALSE;
  $form['buttons']['preview']['#access'] = FALSE;
  // if we're on the edit form, then no 'save' button
  if ($form['buttons']['delete'])
    $form['buttons']['submit']['#access'] = FALSE;
}



/**
 * Implementation of hook_validate();
 *
 */
function cfdr_validate($node, &$form) {

}

/**
 * 
 * @param StdObject $node (by reference)
 */
function cfdr_autofill_fields(&$node) {
  //parse XML file read (with xml DOM(simpleXML sucks at namespaces))
  $doc = new DOMDocument();
  $doc->loadXML($node->xml_file);
  $xpath = new DOMXPath($doc);
  $xpath->registerNamespace('cfd', 'http://www.sat.gob.mx/cfd/2');
  $serie = $xpath->query('/cfd:Comprobante/@serie');
  $folio = $xpath->query('/cfd:Comprobante/@folio');
  $fecha_cfd = $xpath->query('/cfd:Comprobante/@fecha');
  $cliente_rfc = $xpath->query('/cfd:Comprobante/cfd:Receptor/@rfc');
  //now save into the node (->item(0) for first match)
  $node->fecha_cfd = $fecha_cfd->item(0)->value;
  $node->cliente_rfc = $cliente_rfc->item(0)->value;
  $node->title = $serie->item(0)->value . $folio->item(0)->value;
}

/**
 * Implementation of hook_instert().
 */
function cfdr_insert($node) {
  cfdr_autofill_fields($node);
  
  
  //if $node->cliente_rfc matches a username, set $node->cliente_uid to that user
  $node->cliente_uid = cfdr_rfc2uid($node->cliente_rfc);
  
  //for updating title
  $change_node = array(
    'nid' => $node->nid,
    'vid' => $node->vid,
    'title' => $node->title,
  );
  
  //make sure generic RFC they are not publised
  if ($node->cliente_rfc == 'XAXX010101000') {
    $change_node['status'] = 0;
  }
  
  drupal_write_record('cfd', $node);
  drupal_write_record('node', $change_node, 'nid');
  drupal_write_record('node_revisions', $change_node , 'vid');
}

/**
 * Implementation of hook_update().
 */
function cfdr_update($node) {
  //revisions are disabled on the form
  if ($node->revision) {
    cfdr_instert($node);
  }
  else {
    //do nothing
  }
}

/**
 * Implementation of hook_delete().
 */
function cfdr_delete(&$node) {
  db_query('DELETE FROM {cfd} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function cfdr_load($node) {
  return db_fetch_object(db_query('SELECT * FROM {cfd} WHERE nid = %d AND vid = %d', $node->nid, $node->vid));
}

/**
 * Implementation of hook_view().
 */
function cfdr_view($node, $teaser = FALSE, $page = FALSE) {
//  return node_prepare($node, $teaser);
  if (!$teaser) {
    $node = node_prepare($node, $teaser);
    //add the other elements
    $node->content['cfdr_fields'] = array(
      '#value' => theme('cfdr_fields', $node),
      '#weight' => 4,
    );
  }
  else {
    $node = node_prepare($node, $teaser);
  }
  drupal_set_title(t('FE-@title', array('@title' => $node->title)));
  return $node;
}

function theme_cfdr_view_cfds($form) {
  //based on theme_node_admin_nodes() in core - node.admin.inc
  // If there are rows in this form, then $form['title'] contains a list of
  // the title form elements.
  $has_posts = isset($form['list']['title']) && is_array($form['list']['title']);
  $header = array(t('FE #'), t('Date'), t('Download'));

  $output = '';

  $output .= drupal_render($form['date_filter']);
  if ($has_posts) {
    foreach (element_children($form['list']['title']) as $key) {
      $row = array();
      $row[] = drupal_render($form['list']['title'][$key]);
      $row[] = drupal_render($form['list']['date'][$key]);
      $row[] = drupal_render($form['list']['links'][$key]);
      $rows[] = $row;
    }
  }
  else {
    $rows[] = array(array('data' => t('No CFDs available.'), 'colspan' => '3'));
  }

  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }

  $output .= drupal_render($form);

  return $output;
}

function cfdr_view_cfds() {
  global $user;
  $form = cfdr_datefilter_form();
  
  // construct and execute the query
  $basic_query = 'SELECT {cfd}.nid, {cfd}.fecha_cfd, {node}.title FROM {cfd} INNER JOIN {node} ON {cfd}.vid = {node}.vid WHERE {node}.status = 1';
  if ($user->uid != 1)
    $basic_query .= " AND {cfd}.cliente_uid = $user->uid";
  
  if (isset($_SESSION['cfds_filter'])) {
    $start = $_SESSION['cfds_filter']['start'];
    $end = $_SESSION['cfds_filter']['end'];
    $basic_query .= " AND {cfd}.fecha_cfd >= '$start' AND {cfd}.fecha_cfd <= '$end'";
  }
  $results = pager_query($basic_query . ' ORDER BY {cfd}.fecha_cfd ASC', 10);
  
  // construct the list
  $list = array();
  while ($cfd = db_fetch_object($results)) {
    $list['title'][$cfd->nid] = array('#value' => l($cfd->title, "node/$cfd->nid"));
    $list['date'][$cfd->nid] = array('#value' => date_format_date(date_make_date($cfd->fecha_cfd), 'short'));
    $list['links'][$cfd->nid] = array('#value' => cfdr_get_dl_links($cfd->title, $cfd->nid));
  }
  $list['pager'] = array('#value' => theme('pager', NULL, 10, 0));
  $form['list'] = $list;
  $form['#theme'] = 'cfdr_view_cfds';

  return $form;
}

/**
 * 
 */
function cfdr_datefilter_form() {

}

function cfdr_datefilter_form_validate($form, &$form_state) {

}

/**
 * Returns the xml file of the cfd node for download.
 * @param StdObject $node
 */
function cfdr_download_xml($node) {

}

/**
 * looks for the RFC as username in the {users} table.
 * @param string $rfc
 *   Looks for this username
 * @return
 *   UID of the corresponing RFC/username. IF not found returns 1.
 */
function cfdr_rfc2uid($rfc) {
  $result = db_result(db_query("SELECT uid FROM {users} WHERE name='%s'", $rfc));
  //if no user matches, return admin user
  if (!$result)
    return 1;
  else
    return $result;
}

/**
 * returns the links string to download this cfd node as xml or pdf by using l()
 * @return String link
 */
function cfdr_get_dl_links($node_title, $node_nid) {
  // add $node_title.pdf to PDF dl path so Adobe Reader gets that as a filename
  return  l('PDF', "node/$node_nid/download/pdf/$node_title.pdf") . ' | ' . l('XML', "node/$node_nid/download/xml");
}

/*
 * Implementation of hook_cron().
 */
function cfdr_cron() {
  cfdr_scan();
}

/**
 * Scans for .xml cfds in configured directory and moves XML CFDs to another dir
 **/
function cfdr_scan() {
  $scan_path = variable_get('cfdr_scan_path', 'sites/default/cfd');
  $move_path = variable_get('cfdr_move_path', 'sites/default/cfd/scanned');
  if ($files = file_scan_directory($scan_path, '.xml|.XML$', array('.', '..', 'CVS'), 0, FALSE)) {
    foreach ($files as $file) {

    }
  }
}
