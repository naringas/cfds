<?php
/**
 * @file Main module file
 */

/**
 * Implementation of hook_node_info().
 */
function cfdr_node_info() {
  return array(
    'cfdr' => array(
      'name' => 'Received CFD',
      'module' => 'cfdr',
      'description' => t("Provides content type support for Mexican CFDs which have been received"),
      'has_title' => TRUE,
      'title_label' => t('FE #'),
      'has_body' => FALSE,
      'locked' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function cfdr_menu() {
  $menu = array();
  $menu['node/%node/download/pdf'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Download',
    'access callback' => 'cfdr_access',
    'access arguments' => array('view', 1),
    'page callback' => 'cfd_download_pdf',
    'page arguments' => array(1),
    'file' => './cfd.pdf.inc'
  );
  $menu['node/%node/download/xml'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Download',
    'access callback' => 'cfdr_access',
    'access arguments' => array('view', 1),
    'page callback' => 'cfdr_download_xml',
    'page arguments' => array(1),
  );
  $menu['node/%node/html'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'HTML View',
    'access callback' => 'cfdr_access',
    'access arguments' => array('view', 1),
    'page callback' => 'cfdr_view_html',
    'page arguments' => array(1),
  );
  // MUST RENAME
  $menu['cfds'] = array(
    'title' => 'View Facturas Electronicas',
    'access callback' => 'user_access',
    'access arguments' => array('view assigned FEs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cfdr_view_cfds'),
  );
  //Admin menu
  $menu['admin/settings/cfdr'] = array(
    'title' => 'Received FE settings',
    'description' => 'Configure received FE options',
    'access callback' => 'user_access',
    'access arguments' => array('administer cfdr'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cfdr_admin_form'),
    'file' => './cfdr.admin.inc',
  );
  return $menu;
}

/**
 * Implementation of hook_perm().
 */
function cfdr_perm() {
  return array('administer cfdr');
}


/**
 * Implementation of hook_access().
 * Enforces permissions described by hook_perm() for node type cfdr
 * @return boolean true if access granted.
 */
function cfdr_access($op, $node, $account = NULL) {
  global $user;
  if (!isset($account))
    $account = $user;
  
  switch ($op) {
    case 'view':
      return TRUE;

    case 'create':
      return TRUE;

    case 'delete':
      return TRUE;

    case 'update':
      return FALSE;
  }
}

/**
 * Implementation of hook_form().
 */
function cfdr_form(&$node, $form_state) {
  //get info defined in cfdr_node_info()
  $type = node_get_types('type', $node);
  
  $form = array();
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => $type->title_label,
    '#required' => FALSE,
    '#default_value' => $node->title,
    '#weight' => -5,
    '#maxlenght' => 255,
    '#disabled' => TRUE,
  );
  $form['fecha_cfd'] = array(
    '#type' => 'textfield',
    '#title' => 'Fecha y hora',
    '#required' => FALSE,
    '#default_value' => $node->fecha_cfd,
    '#weight' => 0,
    '#maxlenght' => 13,
    '#disabled' => TRUE,
  );
  $form['cliente_rfc'] = array(
    '#type' => 'textfield',
    '#title' => 'RFC receptor',
    '#required' => FALSE,
    '#default_value' => $node->cliente_rfc,
    '#weight' => 1,
    '#maxlenght' => 13,
    '#disabled' => TRUE,
  );
  //for uploading XML file
  //possible check for $node->nid NULLity
  if ($node->nid) {
    $form['xml_file']['#prefix'] = '<strong>' . t('Download') . ':</strong><br />';
    $form['xml_file']['#value'] = cfdr_get_dl_links($node->title, $node->nid);
    $form['xml_file']['#weight'] = 5;
  }
  else {
    $form['#attributes']['enctype'] = 'multipart/form-data';
    $form['xml_file'] = array(
      '#type' => 'file',
      '#title' => t('Select @type file', array('@type' => 'XML')),
      '#required' => FALSE,
      '#weight' => 5,
      '#description' => t('The CFD in XML format'),
    );
  }
  $form['#submit'][] = 'cfdr_xml_file_submit';
  return $form;
}

function cfdr_form_cfdr_node_form_alter(&$form, &$form_state) {
  
}



/**
 * Implementation of hook_validate();
 * checks if a XML file was uploaded and if it is a valid CFD in the node form.
 */
function cfdr_validate($node, &$form) {

}

/**
 * Fills $node with the details read from the $node->xml_file;
 * fills fecha_cfd, cliente_rfc, and title (= serie + folio)
 * 
 * @param StdObject $node (by reference)
 */
function cfdr_autofill_fields(&$node) {
  //parse XML file read (with xml DOM(simpleXML sucks at namespaces))
  $doc = new DOMDocument();
  $doc->loadXML($node->xml_file);
  $xpath = new DOMXPath($doc);
  $xpath->registerNamespace('cfd', 'http://www.sat.gob.mx/cfd/2');
  $serie = $xpath->query('/cfd:Comprobante/@serie');
  $folio = $xpath->query('/cfd:Comprobante/@folio');
  $fecha_cfd = $xpath->query('/cfd:Comprobante/@fecha');
  $cliente_rfc = $xpath->query('/cfd:Comprobante/cfd:Receptor/@rfc');
  //now save into the node (->item(0) for first match)
  $node->fecha_cfd = $fecha_cfd->item(0)->value;
  $node->cliente_rfc = $cliente_rfc->item(0)->value;
  $node->title = $serie->item(0)->value . $folio->item(0)->value;
}

/**
 * Implementation of hook_instert().
 */
function cfdr_insert($node) {
  cfdr_autofill_fields($node);
  
  
  //if $node->cliente_rfc matches a username, set $node->cliente_uid to that user
  $node->cliente_uid = cfdr_rfc2uid($node->cliente_rfc);
  
  //for updating title
  $change_node = array(
    'nid' => $node->nid,
    'vid' => $node->vid,
    'title' => $node->title,
  );
  
  //make sure generic RFC they are not publised
  if ($node->cliente_rfc == 'XAXX010101000') {
    $change_node['status'] = 0;
  }
  
  drupal_write_record('cfd', $node);
  drupal_write_record('node', $change_node, 'nid');
  drupal_write_record('node_revisions', $change_node , 'vid');
}

/**
 * Implementation of hook_update().
 */
function cfdr_update($node) {
  //revisions are disabled on the form
  if ($node->revision) {
    cfdr_instert($node);
  }
  else {
    //do nothing
  }
}

/**
 * Implementation of hook_delete().
 */
function cfdr_delete(&$node) {
  db_query('DELETE FROM {cfd} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function cfdr_load($node) {
  return db_fetch_object(db_query('SELECT * FROM {cfd} WHERE nid = %d AND vid = %d', $node->nid, $node->vid));
}

/**
 * Implementation of hook_view().
 */
function cfdr_view($node, $teaser = FALSE, $page = FALSE) {
//  return node_prepare($node, $teaser);
  if (!$teaser) {
    $node = node_prepare($node, $teaser);
    //add the other elements
    $node->content['cfdr_fields'] = array(
      '#value' => theme('cfdr_fields', $node),
      '#weight' => 4,
    );
  }
  else {
    $node = node_prepare($node, $teaser);
  }
  drupal_set_title(t('FE-@title', array('@title' => $node->title)));
  return $node;
}

function theme_cfdr_view_cfds($form) {
  //based on theme_node_admin_nodes() in core - node.admin.inc
  // If there are rows in this form, then $form['title'] contains a list of
  // the title form elements.
  $has_posts = isset($form['list']['title']) && is_array($form['list']['title']);
  $header = array(t('FE #'), t('Date'), t('Download'));

  $output = '';

  $output .= drupal_render($form['date_filter']);
  if ($has_posts) {
    foreach (element_children($form['list']['title']) as $key) {
      $row = array();
      $row[] = drupal_render($form['list']['title'][$key]);
      $row[] = drupal_render($form['list']['date'][$key]);
      $row[] = drupal_render($form['list']['links'][$key]);
      $rows[] = $row;
    }
  }
  else {
    $rows[] = array(array('data' => t('No CFDs available.'), 'colspan' => '3'));
  }

  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }

  $output .= drupal_render($form);

  return $output;
}

function cfdr_view_cfds() {
  global $user;
  $form = cfdr_datefilter_form();
  
  // construct and execute the query
  $basic_query = 'SELECT {cfd}.nid, {cfd}.fecha_cfd, {node}.title FROM {cfd} INNER JOIN {node} ON {cfd}.vid = {node}.vid WHERE {node}.status = 1';
  if ($user->uid != 1)
    $basic_query .= " AND {cfd}.cliente_uid = $user->uid";
  
  if (isset($_SESSION['cfds_filter'])) {
    $start = $_SESSION['cfds_filter']['start'];
    $end = $_SESSION['cfds_filter']['end'];
    $basic_query .= " AND {cfd}.fecha_cfd >= '$start' AND {cfd}.fecha_cfd <= '$end'";
  }
  $results = pager_query($basic_query . ' ORDER BY {cfd}.fecha_cfd ASC', 10);
  
  // construct the list
  $list = array();
  while ($cfd = db_fetch_object($results)) {
    $list['title'][$cfd->nid] = array('#value' => l($cfd->title, "node/$cfd->nid"));
    $list['date'][$cfd->nid] = array('#value' => date_format_date(date_make_date($cfd->fecha_cfd), 'short'));
    $list['links'][$cfd->nid] = array('#value' => cfdr_get_dl_links($cfd->title, $cfd->nid));
  }
  $list['pager'] = array('#value' => theme('pager', NULL, 10, 0));
  $form['list'] = $list;
  $form['#theme'] = 'cfdr_view_cfds';

  return $form;
}

/**
 * 
 */
function cfdr_datefilter_form() {
  drupal_add_css(drupal_get_path('module', 'cfd') . '/basa.datepick.css');
  drupal_add_js(drupal_get_path('module', 'cfd')  . '/datepick/jquery.datepick.js');
  // @todo Detect language, somehow
  drupal_add_js(drupal_get_path('module', 'cfd') . '/datepick/jquery.datepick-es.js');
  drupal_add_js(drupal_get_path('module', 'cfd') . '/cfdr_datepick.js');
  
  
  $form['date_filter'] = array(
    '#type' => 'fieldset',
  );
  $cal_img = drupal_get_path('module', 'cfd') . '/datepick/calendar-blue.gif';
  $form['date_filter']['range'] = array(
    '#type' => 'textfield',
    '#title' => t('Dates range'),
    '#size' => 26,
    '#maxlenght' => 24,
    '#description' => t('Format: yyyy-mm-dd -- yyyy-mm-dd'),
    '#suffix' => '<div style="display: none;"><img id="calImg" src="' . $cal_img . '" class="trigger"/></div>',
    '#default_value' => $_SESSION['cfds_filter']['range'],
  );
  $form['date_filter']['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );
  $form['date_filter']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
  );
  $form['#validate'][] = 'cfdr_datefilter_form_validate';
  $form['#submit'][] = 'cfdr_datefilter_form_submit';
  
  return $form;
}

function cfdr_datefilter_form_validate($form, &$form_state) {
  //on reset, skip validation
  if ($form_state['values']['op'] == t('Reset'))
    return;
  
  $range = $form_state['values']['range'];
  if (!empty($range) && !preg_match('/[0-9]{4}-[0-9]{2}-[0-9]{2}\s--\s[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $range)) {
    form_set_error('range', t('Please use the calendar popup or the following format: yyyy-mm-dd -- yyyy-mm-dd'));
  }
}

function cfdr_datefilter_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Reset') || empty($form_state['values']['range'])) {
    unset($_SESSION['cfds_filter']);
    return;
  }
  //put in _session for form's default value
  $_SESSION['cfds_filter']['range'] = $form_state['values']['range'];
  $dates = explode(' -- ', $form_state['values']['range']);
  $start = date_make_date($dates[0]);
  $end = date_make_date($dates[1]);
  if (!empty($start) && !empty($end)) {
      //date_add is only for PHP >= 5.3  :( so no date_add($end, new DateInterval('PT23H59M59S'));
      //therefore we do this ugly thing: 86399 seconds = one day - one second
      $end = date_make_date(date_format($end, DATE_FORMAT_UNIX) + 86399, NULL, DATE_UNIX);
      
      $_SESSION['cfds_filter']['start'] = date_format($start, DATE_FORMAT_ISO);
      $_SESSION['cfds_filter']['end'] = date_format($end, DATE_FORMAT_ISO);
  }
}

/**
 * Returns the xml_file of the cfd node for download.
 * @param StdObject $node
 */
function cfdr_download_xml($node) {
  //based on file_transfer()
  if (ob_get_level()) {
    ob_end_clean();
  }
  $headers = array(
    'Content-Description: File Transfer',
    "Content-Disposition: attachment; filename=$node->title.xml",
    'Content-type: text/xml',
  );
  foreach ($headers as $header) {
    // To prevent HTTP header injection, we delete new lines that are
    // not followed by a space or a tab.
    // See http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2
    $header = preg_replace('/\r?\n(?!\t| )/', '', $header);
    drupal_set_header($header);
  }
  print $node->xml_file;
  exit();
}

/**
 * looks for the RFC as username in the {users} table.
 * @param string $rfc
 *   Looks for this username
 * @return
 *   UID of the corresponing RFC/username. IF not found returns 1.
 */
function cfdr_rfc2uid($rfc) {
  $result = db_result(db_query("SELECT uid FROM {users} WHERE name='%s'", $rfc));
  //if no user matches, return admin user
  if (!$result)
    return 1;
  else
    return $result;
}

/**POSSIBLY DEPRECEATED but still useful query example
 * Updates field {cfd}.cliente_uid for all already registered clients who have
 * unassigned CFDs in the table.
 */
function cfdr_update_cliente_uid() {
  //updatables are CFDs of a client who is regisgtered and has available CFDs.
  //The CFD must not yet be assigned to any users (thus cliente_uid = 1)
  $updatables = db_query('SELECT {cfd}.nid, {cfd}.cliente_rfc FROM {users} INNER JOIN {cfd} ON {users}.name = {cfd}.cliente_rfc WHERE {cfd}.cliente_uid = 1');
  while ($FE = db_fetch_array($updatables)) {
    $uid = cfdr_rfc2uid($FE['cliente_rfc']);
    db_query('UPDATE {cfd} SET cliente_uid = %d WHERE nid = %d', $uid, $FE['nid']);
  }
}

/**
 * Implementation of hook_user().
 * On user add: assign CFDs to new user's RFC (if it is a valid RFC)
 */
function cfdr_user($op, &$edit, &$account, $category = NULL) {
  $rfc_regexp = '/^(([A-Z]){3,4})([0-9]{6})((([A-Z]|[0-9]){3}))$/';
  switch ($op) {
    case 'insert':
      // if the username isn't an RFC we're not inetersted
      if (@preg_match($rfc_regexp, $account->name)) {
        db_query("UPDATE {cfd} SET cliente_uid = %d WHERE cliente_rfc = '%s'", $account->uid, $account->name);
      }
      break;
    case 'update':
    // the uid shouldn't change, but the name may, so...
    // on 'update' the new value is in $edit
    $new_name = $edit['name'];
    $old_name = $account->name;
    
    // ...if name changed and changed into a valid RFC
    if ($new_name != $old_name && @preg_match($rfc_regexp, $new_name)) {
      drupal_set_message(t('Username (RFC) change'));
      // de-assign any existing CFDs with the old username
      db_query("UPDATE {cfd} SET cliente_uid = 1 WHERE cliente_rfc = '%s'", $old_name);
      // assign any existing CFDs to the new name
      db_query("UPDATE {cfd} SET cliente_uid = %d WHERE cliente_rfc = '%s'", $account->uid, $new_name);
    }
      
      break;
    case 'delete':
      //assign back to admin user (uid 1)
      if (@preg_match($rfc_regexp, $account->name)) {
        db_query("UPDATE {cfd} SET cliente_uid = 1 WHERE cliente_rfc = '%s'", $account->name);
      }
      break;
  }
}

/**
 * returns the links string to download this cfd node as xml or pdf by using l()
 * @return String link
 */
function cfdr_get_dl_links($node_title, $node_nid) {
  // add $node_title.pdf to PDF dl path so Adobe Reader gets that as a filename
  return  l('PDF', "node/$node_nid/download/pdf/$node_title.pdf") . ' | ' . l('XML', "node/$node_nid/download/xml");
}

/**
 * Applies the cfdr_html.xsl transformation and outputs it as HTML
 **/
function cfdr_view_html($node) {
  $doc = new DOMDocument(); $doc->loadXML($node->xml_file);
  //Header
  $xsl_file = './' . drupal_get_path('module', 'cfd') . '/resources/cfdr_html.xsl';
  $xsl_html = new DOMDocument(); $xsl_html->load($xsl_file);
  $xsl = new XSLTProcessor(); $xsl->importStylesheet($xsl_html);
  $html = $xsl->transformToXml($doc);
  return $html;
}

/*******************************
 * Theme functions for hook_view()
 *******************************/

function cfdr_theme() {
  return array(
    'cfdr_fields' => array(
      'arguments' => array('node'),
    ),
    'cfdr_view_cfds' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function theme_cfdr_fields($node) {
  $output = "<p><strong>RFC receptor: </strong>$node->cliente_rfc</p>";
  $output .= "<p><strong>Fecha de la FE: </strong>$node->fecha_cfd</p>";
  $output .= '<strong>' . t('Download') . ':</strong> ' . cfdr_get_dl_links($node->title, $node->nid);
  return $output;
}

/*
 * Implementation of hook_cron().
 * Deletes generic RFC and old CFDs (older than 5 weeks)
 */
function cfdr_cron() {
  // generic RFC OR time() - 5 weeks
  $result = db_query("SELECT {cfd}.nid FROM {cfd} WHERE cliente_rfc = 'XAXX010101000' OR fecha_cfd < '%s'", date(DATE_FORMAT_ISO, time() - 3024000));
  $count = 0;
  while ($cfd = db_fetch_array($result)) {
    //do this instead of node_delte() as it is faster
    db_query('DELETE FROM {node} WHERE nid = %d', $cfd['nid']);
    db_query('DELETE FROM {node_revisions} WHERE nid = %d', $cfd['nid']);
    db_query('DELETE FROM {cfd} WHERE nid = %d', $cfd['nid']);
    
    //Code from node_delete(); Remove this node from the search index if needed.
    if (function_exists('search_wipe')) {
      search_wipe($cfd['nid'], 'node');
    }
    $count++;
   // watchdog('content', 'F.E. @nid deleted by cron.', array('@nid' => $cfd['nid']));
  }
  if ($count > 0) 
    watchdog('cfd', '@num F.E.s deleted', array('@num' => $count));
}
